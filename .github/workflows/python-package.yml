# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Calculate port
        id: calc
        run: |
          PYTHON_VER_INT=$(echo "${{ matrix.python-version }}" | tr -d '.')
          PORT=$((27000 + PYTHON_VER_INT))
          echo "port=$PORT" >> $GITHUB_OUTPUT
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache Poetry virtual environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-pypoetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pypoetry-
      - name: Setup MongoDB service
        uses: alexdlukens/mongodb-github-action@cfd62412ca92cd39081beae147ffa8afa9592a4b
        with:
          mongodb-version: 4.4
          mongodb-username: root
          mongodb-password: secret
          mongodb-port: ${{ steps.calc.outputs.port }}
          container-name: mongodb-${{ matrix.python-version }}
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v9
      - name: Poetry dev dependencies install
        run: |
          poetry install --with dev
      - name: Test with pytest
        run: |
          poetry run pytest tests/ -x -vv --junitxml=junit/test-results.xml
        env:
          MONGODB_URI: mongodb://root:secret@localhost:${{ steps.calc.outputs.port }}/?authSource=admin
  sphinx_docs:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v9
      - name: Poetry dev dependencies install
        run: |
          poetry install --with dev
      - name: Build and Deploy Documentation
        run: |
          TZ=UTC poetry run sphinx-build -b html docs/source/ build/
          touch build/.nojekyll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
  deploy_to_pypi:
    needs:
      - build
      - sphinx_docs
    if: github.ref == 'refs/tags/v*'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v9
      - name: Poetry dev dependencies install
        run: |
          poetry install --with dev
      - name: Build and Publish to PyPI
        run: |
          poetry build
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: $(poetry version --no-ansi | awk -F' ' '{print $2}')
          release_name: Eventit-py Release $(poetry version --no-ansi | awk -F' ' '{print $2}')
          body: |
            This is an automated release created by GitHub Actions.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
